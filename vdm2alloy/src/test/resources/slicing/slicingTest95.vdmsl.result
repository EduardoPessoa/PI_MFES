"module balanceOf
 definitions
private static  Transaction = Transaction
\tinv mk_Transaction(-, -, a, -) == (a > 0)
private static  Date = Date
private static  TransactionType = TransactionType
private static  Details = Details
private static  private static sum: (seq of (real) -> real)
\tsum(seqln) ==
(if (seqln = [])
then 0
else ((hd seqln) + sum((tl seqln))))
private static  private static balanceOf: (seq of (Transaction) -> real)
\tbalanceOf(transln) ==
let dep:seq of (nat) = [(transln(i).amount) | i in set (inds transln) & ((transln(i).transaction_type) = <Withdrawal>)], withd:seq of (nat) = [(transln(i).amount) | i in set (inds transln) & ((transln(i).transaction_type) = <Withdrawal>)] in (sum(dep) - sum(withd))
end balanceOf\n"